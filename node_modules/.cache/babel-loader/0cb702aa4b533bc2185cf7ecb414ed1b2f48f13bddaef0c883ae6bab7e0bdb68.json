{"ast":null,"code":"var _jsxFileName = \"/Users/eunicesung/Desktop/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = props => {\n  _s();\n  const [state, setState] = useState({\n    name: \"\",\n    phone: \"\",\n    email: \"\"\n  });\n  const [duplicateName, setDuplicateName] = useState(false);\n  const contactListName = props.contact;\n  const addContact = props.addContact;\n  useEffect(() => {\n    if (contactListName.indexOf(state.name)) {\n      setDuplicateName(true);\n    } else {\n      setDuplicateName(false);\n    }\n  }, [state.name]);\n  const handleSubmit = e => {\n    e.preventDefault();\n    //setName(e.target.value)\n\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n    if (duplicateName === false) {\n      addContact(state);\n    }\n    setState({\n      name: \"\",\n      phone: \"\",\n      email: \"\"\n    });\n  };\n\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        state: state,\n        setState: setState,\n        handleSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        contact: props.contact\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"z21Qgf75jXshWaPmHtkBkmSRUVo=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","props","_s","state","setState","name","phone","email","duplicateName","setDuplicateName","contactListName","contact","addContact","indexOf","handleSubmit","e","preventDefault","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/eunicesung/Desktop/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = (props) => {\r\n  \r\nconst[state,setState]=useState({\r\nname:\"\",\r\nphone:\"\",\r\nemail:\"\"\r\n\r\n\r\n})\r\nconst[duplicateName,setDuplicateName]=useState(false)\r\n\r\n\r\nconst contactListName=props.contact;\r\nconst addContact=props.addContact;\r\n\r\nuseEffect(()=>{\r\n\r\n if(contactListName.indexOf(state.name)){\r\n\r\n  setDuplicateName(true);\r\n\r\n }else{\r\n\r\n  setDuplicateName(false)\r\n\r\n }\r\n  \r\n\r\n},[state.name])\r\n\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    //setName(e.target.value)\r\n    \r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n    if(duplicateName===false){\r\n   \r\n      addContact(state)\r\n      \r\n\r\n    }\r\n\r\n    setState({\r\n      name:\"\",\r\n      phone:\"\",\r\n      email:\"\"\r\n      \r\n      \r\n      })\r\n\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2> \r\n        <ContactForm state={state} setState={setState}\r\n          handleSubmit={handleSubmit} />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList contact={props.contact}/>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,SAASC,WAAW,QAAQ,0CAA0C;AACtE,SAASC,QAAQ,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,OAAO,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAEvC,MAAK,CAACC,KAAK,EAACC,QAAQ,CAAC,GAACV,QAAQ,CAAC;IAC/BW,IAAI,EAAC,EAAE;IACPC,KAAK,EAAC,EAAE;IACRC,KAAK,EAAC;EAGN,CAAC,CAAC;EACF,MAAK,CAACC,aAAa,EAACC,gBAAgB,CAAC,GAACf,QAAQ,CAAC,KAAK,CAAC;EAGrD,MAAMgB,eAAe,GAACT,KAAK,CAACU,OAAO;EACnC,MAAMC,UAAU,GAACX,KAAK,CAACW,UAAU;EAEjCjB,SAAS,CAAC,MAAI;IAEb,IAAGe,eAAe,CAACG,OAAO,CAACV,KAAK,CAACE,IAAI,CAAC,EAAC;MAEtCI,gBAAgB,CAAC,IAAI,CAAC;IAEvB,CAAC,MAAI;MAEJA,gBAAgB,CAAC,KAAK,CAAC;IAExB;EAGD,CAAC,EAAC,CAACN,KAAK,CAACE,IAAI,CAAC,CAAC;EAGb,MAAMS,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,EAAE;IAClB;;IAEA;AACJ;AACA;AACA;IACI,IAAGR,aAAa,KAAG,KAAK,EAAC;MAEvBI,UAAU,CAACT,KAAK,CAAC;IAGnB;IAEAC,QAAQ,CAAC;MACPC,IAAI,EAAC,EAAE;MACPC,KAAK,EAAC,EAAE;MACRC,KAAK,EAAC;IAGN,CAAC,CAAC;EAEN,CAAC;;EAED;AACF;AACA;AACA;;EAEE,oBACER,OAAA;IAAAkB,QAAA,gBACElB,OAAA;MAAAkB,QAAA,gBACElB,OAAA;QAAAkB,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACpBtB,OAAA,CAACH,WAAW;QAACO,KAAK,EAAEA,KAAM;QAACC,QAAQ,EAAEA,QAAS;QAC5CU,YAAY,EAAEA;MAAa;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACxB,eACVtB,OAAA;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACNtB,OAAA;MAAAkB,QAAA,gBACElB,OAAA;QAAAkB,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACjBtB,OAAA,CAACF,QAAQ;QAACc,OAAO,EAAEV,KAAK,CAACU;MAAQ;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAE;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC3B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACN;AAEV,CAAC;AAACnB,EAAA,CA3EWF,YAAY;AAAAsB,EAAA,GAAZtB,YAAY;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}