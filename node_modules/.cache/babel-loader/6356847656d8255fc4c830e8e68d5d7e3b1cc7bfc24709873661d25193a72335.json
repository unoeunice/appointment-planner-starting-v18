{"ast":null,"code":"var _jsxFileName = \"/Users/eunicesung/Desktop/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = _ref => {\n  _s();\n  let {\n    contact,\n    addContact\n  } = _ref;\n  const [name, setName] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [duplicateName, setDuplicateName] = useState(false);\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (duplicateName === false) {\n      addContact(name, phone, email);\n      setName(\"\");\n      setPhone(\"\");\n      setEmail(\"\");\n    } else {\n      setName(\"\");\n      setPhone(\"\");\n      setEmail(\"\");\n    }\n  };\n  function nameDuplicate(arr, prop) {\n    return arr.map(item => item[prop]);\n  }\n  const contactNames = nameDuplicate(contact, \"name\");\n  console.log(contactNames);\n  useEffect(() => {\n    if (contactNames.includes(name)) {\n      setDuplicateName(true);\n    } else {\n      setDuplicateName(false);\n    }\n  }, [name, contact]);\n\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n\n  console.log(contact);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        handleSubmit: handleSubmit,\n        name: name,\n        phone: phone,\n        email: email,\n        setName: setName,\n        setEmail: setEmail,\n        setPhone: setPhone,\n        contact: contact\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        tiles: contact\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"wU3+8Y+SVrhiOVibmGNVLFeZnYw=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","_ref","_s","contact","addContact","name","setName","phone","setPhone","email","setEmail","duplicateName","setDuplicateName","handleSubmit","e","preventDefault","nameDuplicate","arr","prop","map","item","contactNames","console","log","includes","children","fileName","_jsxFileName","lineNumber","columnNumber","tiles","_c","$RefreshReg$"],"sources":["/Users/eunicesung/Desktop/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ({\r\n  contact,\r\n  addContact\r\n\r\n\r\n}) => {\r\n\r\n\r\nconst[name,setName]=useState(\"\")\r\nconst[phone,setPhone]=useState(\"\")\r\nconst[email,setEmail]=useState(\"\")\r\n\r\n\r\nconst[duplicateName,setDuplicateName]=useState(false)\r\n\r\n\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    \r\n  \r\n    if(duplicateName===false){\r\n   \r\n      addContact(name,phone,email)\r\n\r\n      setName(\"\")\r\n      setPhone(\"\")\r\n      setEmail(\"\")\r\n      \r\n\r\n    }else{\r\n\r\n\r\n      setName(\"\")\r\n      setPhone(\"\")\r\n      setEmail(\"\")\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n\r\n  };\r\n\r\n\r\nfunction nameDuplicate(arr,prop){\r\n\r\nreturn arr.map(item=>item[prop])\r\n\r\n\r\n}\r\n\r\n\r\nconst contactNames=nameDuplicate(contact,\"name\")\r\nconsole.log(contactNames)\r\n   \r\n  useEffect(()=>{\r\n\r\n\r\n\r\n    if(contactNames.includes(name)){\r\n      \r\n\r\n     \r\n   \r\n     setDuplicateName(true);\r\n   \r\n    }else{\r\n   \r\n     setDuplicateName(false)\r\n   \r\n    }\r\n     \r\n   \r\n   },[name,contact]) \r\n  \r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n  console.log(contact)\r\n\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n\r\n        <h2>Add Contact</h2> \r\n        <ContactForm \r\n          handleSubmit={handleSubmit} name={name} phone={phone} email={email} setName={setName} setEmail={setEmail} setPhone={setPhone} contact={contact}/>\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList tiles={contact} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}